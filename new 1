#SET 4TH BUILD
Django Login System

Required Imports
from django.contrib.auth import views as auth_views

url pattern
path('login/', auth_views.LoginView.as_view(template_name= 'users\login.html'), name= 'login'),
path('login/', auth_views.LogoutView.as_view(template_name= 'users\logout.html'), name= 'logout'),

Create pages for login and logout Under Templates
login.html and logout.html and by refault it render those views
/login
/logout

Then use "LOGIN_REDIRECT_URL" = 'blog-home' in settings.py file because django default redirect to accounts/profiles page.


Then modify the register view to redirect to login page instead of home page.


Then  modify the base template navbar
if user.is_authenticated
	logout
else:
	login
	register

Create a profile page(view,html,url)

create a login required decorator to restrict the logged ours from profile page

Then use "LOGIN_URL" = 'login' in settings.py file because to redirect the users to login page if not logged in

Restrictions
------------------------------

 from django.contrib.auth.decorators import login_required
 Place the login_required above the profile view

-------------------------------------------------------

User profile page

functionality for updating profile page..
---------------------------------------------

1. Under Users App, open Models and create two model forms for updating the profile..
	UserUpdateForm()
	ProfileUpdateForm()

2. Then create instances in views under users app and send to context for rendering to HTML.
	u_form = UserUpdateForm()
    p_form = ProfileUpdateForm()

3. Then render into profile HTML file..
	      <form method="POST" enctype = "multipart/form-data">
            {% csrf_token%}
    <fieldset class = "form-group">
    <legend class = "border-bottom mb-4">Profile Info</legend>
    {{u_form|crispy}}
    {{p_form|crispy}}
    </fieldset>
    <div class = "form-group">

        <button class = "btn btn-outline-info" type="submit">Update</button>

    </div>
    </form>

4. Then Retrive the current information of logged user with pre filling the form..


5. We can populate the fields of the form just by passing the object..
	u_form = UserUpdateForm(instance=request.user)
    p_form = ProfileUpdateForm(instance=request.user.profile)

6. Finally Update the form and save..
@login_required
def profile(request):
    if request.method== 'POST':
        u_form = UserUpdateForm(request.POST, instance=request.user)
        p_form = ProfileUpdateForm(request.POST, request.FILES, instance=request.user.profile)

        if u_form.is_valid() and p_form.is_valid():
            u_form.save()
            p_form.save()
            username = u_form.cleaned_data.get('username')
            messages.success(request, f'Account Updated Successfully {username}!')
            return redirect('profile')
    else:
        u_form = UserUpdateForm(instance=request.user)
        p_form = ProfileUpdateForm(instance=request.user.profile)  

    context = {

        'u_form':u_form,
        'p_form':p_form
    }

    return render(request,'users/profile.html',context)


7. Then resize the image under Models
from  PIL import Image
class Profile(models.Model):
    user = models.OneToOneField(User, on_delete= models.CASCADE)
    image = models.ImageField(default= 'default.jpg', upload_to='profile_pics')

    def __str__(self):
        return f'{self.user.username} Profile'

    def save(self):
        super().save()

        img = Image.open(self.image.path)

        if img.height > 300 or img.width > 300:
            output_size = (300,300)
            img.thumbnail(output_size)
            img.save(self.image.path)



-----------------------------------------------------------------------------
working with class based views                                              
-----------------------------------------------------------------------------

In class Based Views We can directly import model and render directly to template..

Background process : It will create a model form and render that to template without the need of Model Form.

Class Based View Name : ListView
---------------------------------

Purpose: Retrive the Data from the model

Required Imports for class Based View: import in Views as ListView and Urls by the name specified in views function
    from django.views.generic import ListView

View Syntax: class PostListView(ListView):
        model = Post

Url Route:
    Syntax: path('', PostListView.as_view(),name = 'blog-home')

Template: 
 {% extends "blog/base.html" %}
{% block content %}
    {% for post in posts %}

        <article class="media content-section">
          <img class = "rounded-circle article-img" src="{{post.author.profile.image.url}}" alt="">
          <div class="media-body">
            <div class="article-metadata">
              <a class="mr-2" href="#">{{ post.author }}</a>
              <small class="text-muted">{{ post.date_posted }}</small>
            </div>
            <h2><a class="article-title" href="{% url 'post-detail' post.id%}">{{ post.title }}</a></h2>
            <p class="article-content">{{ post.content }}</p>
           
          </div>
        </article>
    {% endfor %}
{% endblock content %}


Syntax with additional fields:
    class PostListView(ListView):
    model = Post
    template_name = 'blog/home.html'
    context_object_name = 'posts'
    ordering = ['-date_posted']

Class Based View Name : DetailView
------------------------------------------

Purpose: Retrive the Data from the model

Required Imports for class Based View:import in Views as DetailView and Urls by the name specified in views function
    from django.views.generic import DetailView

Syntax: class PostDetailView(DetailView):
        model = Post

Url Route:
    Syntax: path('post/<int:pk>', PostDetailView.as_view(), name='blog-'),
    The above syntax gets the details with an id
    The detail view expects and id so that it pulls the post with an exact id..


Template: post_details.html (its the default page the detail view looks for)
{% extends "blog/base.html" %}
{% block content %}
        <article class="media content-section">
        <img class = "rounded-circle article-img" src="{{object.author.profile.image.url}}" alt="">
          <div class="media-body">
            <div class="article-metadata">
              <a class="mr-2" href="#">{{ object.author }}</a>
              <small class="text-muted">{{ object.date_posted }}</small>
            </div>
            <h2 class="article-title">{{ object.title }}</a></h2>
            <p class="article-content">{{ object.content }}</p>
           
          </div>
        </article>
{% endblock content %}

Imp Points:
default path: appname/post_detail.html
When we are dealing with detail view It expects context of the template as object..


Class Based View Name : CreateView
------------------------------------------
Purpose: Retrive the fields from the model and render into html.

Required Imports for class Based View: import in Views as CreateView and Urls by the name specified in views function
from django.views.generic import CreateView
syntax: 
    class PostCreateView(CreateView):
    model = Post
    fields = ['title','content']

    def form_valid(self,form):
        form.instance.author = self.request.user
        return super().form_valid(form)

Url Route:
    path('post/new/', PostCreateView.as_view(), name='post-detail'),

Note: Prevent Users from creating post without login
from django.contrib.auth.mixins import LoginRequiredMixin
class PostCreateView(LoginRequiredMixin, CreateView):
    model = Post
    fields = ['title','content']

    def form_valid(self,form):
        form.instance.author = self.request.user
        return super().form_valid(form)


Class Based View Name : UpdateView

class PostUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
    model = Post
    fields = ['title', 'content']

    def form_valid(self, form):
        form.instance.author = self.request.user
        return super().form_valid(form)

    def test_func(self):
        post = self.get_object()
        if self.request.user == post.author:
            return True
        return False


from django.contrib.auth.mixins import LoginRequiredMixin,UserPassesTestMixin


Class Based View Name : DeleteView







